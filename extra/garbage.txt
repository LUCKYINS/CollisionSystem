code1:
    #include <iostream>
    #include "vec2.hpp"
    #include <vector>
    #include <SFML/Graphics.hpp>


    const std::vector<sf::Vector2i> getCollisionPositionSet(const sf::Vector2f& center, const sf::Vector2f& dimension){
        std::vector<sf::Vector2i> collision;
        for (int x=0; x < dimension.x; x++){
            for(int y=0; y< dimension.y; y++){
                collision.push_back(sf::Vector2i(x+center.x,y+center.y));
            }
        }
        return collision;
    }

    const sf::Vector2f murv(double a, double v, double x){
            v = v + a;
            x = x + v + (1/2) * a;
            return sf::Vector2f(v, x);

    }

    int main(){
        sf::RenderWindow window(sf::VideoMode(800, 500), "Collision");
        sf::CircleShape shape(50);
        sf::RectangleShape rec(sf::Vector2f(800, 50));
        rec.setPosition(0, 400);
        const std::vector<sf::Vector2i>col = getCollisionPositionSet(rec.getScale(), rec.getPosition());
        for(sf::Vector2i i:col){
            std::cout<< i.x <<"::"<<i.y<<"\n";
        }
        double a = 0.000005;
        double v = 0;
        double y = 0;

        while (window.isOpen()){
            sf::Event InputEvent;
            while (window.pollEvent(InputEvent)){
                if (InputEvent.type == InputEvent.Closed){
                    window.close();
                }
            }
            // Collision
            //
            std::cout << shape.getPosition().x <<"::"<< int(shape.getPosition().y) <<"\n";
            shape.setPosition(0, y);

            window.clear();
            window.draw(shape);
            window.draw(rec);
            window.display();

            v = v + a;
            y = y + v + (1/2) * a;
        }

        return 0;
    }

Position:
    std::cout << shape.getPosition().x <<"::"<< int(shape.getPosition().y) <<"\n";

Get the collision V1.0.0:

    const std::vector<sf::Vector2i> getCollisionPositionSet(const sf::Vector2f& center, const sf::Vector2f& dimension){
        std::vector<sf::Vector2i> collision;
        std::cout<<center.x<<"::"<<center.y<<"\n";
        for (int x=0; x <= dimension.x; x++){
            for(int y=0; y<= dimension.y; y++){
                collision.push_back(sf::Vector2i(x+center.x,y+center.y));
            }
        }
        return collision;
    }
    if (shape.getPosition().y > 300){
        if (inVector(collision, sf::Vector2i(shape.getPosition().x, shape.getPosition().y))){
            std::cout << "ok";
        }

    }
Test Vec:
    #include <iostream>
    #include "vec.hpp"

    int main(){
        Vec3 X(1,2, 3);
        Vec3 Y(1, 2, 3);
        bool dd =  X==Y;
        std::cout<< dd;
    }
Code2:
    const std::unordered_set<Vec2> getCollisionPositionSet(const sf::Vector2f& center, const sf::Vector2f& dimension){
        std::unordered_set<Vec2> collision;
        for (int x=0; x <= dimension.x; x++){
            for(int y=0; y<= dimension.y; y++){
                collision.insert(Vec2(x+center.x,y+center.y));
            }
        }
        return collision;
    }

    const sf::Vector2f murv(double a, double v, double x){
            v = v + a;
            x = x + v + (1/2) * a;
            return sf::Vector2f(v, x);
    }


    int main(){
        sf::RenderWindow window(sf::VideoMode(800, 500), "Collision");
        sf::CircleShape shape(50);
        sf::RectangleShape rec(sf::Vector2f(800, 50));

        rec.setPosition(0, 400);

        std::unordered_set<Vec2> collision = getCollisionPositionSet(rec.getPosition(),rec.getSize());
        double a = 0.0000001;
        double v = 0;
        double y = 0;

        while (window.isOpen()){
            sf::Event InputEvent;
            while (window.pollEvent(InputEvent)){
                if (InputEvent.type == InputEvent.Closed){
                    window.close();
                }
            }
            // Collision
            //

            shape.setPosition(0, y);
            if (shape.getPosition().y > 200){
                if (collision.count(Vec2(shape.getPosition().x, shape.getPosition().y))){
                    a = 0.1;
                    v = 0;
                }

            }
            window.clear();
            window.draw(shape);
            window.draw(rec);
            window.display();

            v = v + a;
            y = y + v + (1/2) * a;
        }

        return 0;
    }
collision.hpp:
    Collision

class StaticCollision{
    private:
        Shape2D shape;
    public:
        ~StaticCollision() = default;
        StaticCollision() = default;
        StaticCollision(Shape2D SHAPE):shape(SHAPE){}
};

class DynamicCollision:public StaticCollision{
    private:
    public:
        DynamicCollision(Shape2D SHAPE): StaticCollision(SHAPE){}
        void stickToObject(){}
};
// Ellipse
class Ellipse{
    protected:
        double A_axis=1;
        double B_axis=1;
    public:
        ~Ellipse() = default;
        Ellipse() = default;
        Ellipse(int A_AXIS, int B_AXIS, Vec2 CENTRE):A_axis(A_AXIS), B_axis(B_AXIS){}
};
// Triangle
class Triangle{
    protected:
        double height;
        double base;
    public:
        ~Triangle() = default;
        Triangle() = default;
        Triangle(int HEIGHT, int BASE, Vec2 CENTRE):height(HEIGHT), base(BASE){}
};
// Container
class CollisionObjectContainer{
    private:
        std::vector<std::reference_wrapper<Shape2DCollision>> collisionVector; // add refenceing of objects
        bool isColliding(Shape2DCollision &obj1, Shape2DCollision &obj2)const{
            if (obj1.getShape() == Shape2D::Rect  && obj2.getShape() == Shape2D::Rect){
                // Colliding for rect/rect
                bool colliding = obj1.getCentre().getX() - obj1.getWidth()/2 <= obj2.getCentre().getX() + obj2.getWidth()/2 &&
                obj1.getCentre().getX() + obj1.getWidth()/2 >= obj2.getCentre().getX() - obj2.getWidth()/2&&
                obj1.getCentre().getY() - obj1.getLength()/2 <= obj2.getCentre().getY() + obj2.getLength()/2&&
                obj1.getCentre().getY() + obj1.getLength()/2 >= obj2.getCentre().getY() - obj2.getLength()/2;
                return colliding;
            }
            return false;
        }

    public:
        ~CollisionObjectContainer() = default;
        CollisionObjectContainer() = default;
        void addCollisionObject(Shape2DCollision &obj){collisionVector.push_back(obj);}

        void checkCollision(){
            for (Shape2DCollision &obj1 : collisionVector){
                for(Shape2DCollision &obj2: collisionVector){
                    if (!(obj1==obj2) && isColliding(obj1, obj2)){
                    }
                }
            }
        }
};
//Shape2DCollision (replace Shape2D)
class Shape2DCollision: public Rectangle, Circle{
    private:
        Vec2 centre = Vec2(0,0);
        //bool dynamic = true;
        Shape2D shape;

    public:
        ~Shape2DCollision() = default;
        Shape2DCollision() = default;

        Shape2DCollision(Rectangle OBJ, Vec2 CENTRE): Rectangle(OBJ),centre(CENTRE){shape = Shape2D::Rect;} // To continu

        Vec2 getCentre()const{return centre;}
        void setCentre(Vec2 obj){centre = obj;}
        void setCentre(double x, double y){centre = Vec2(x, y);}
        void changeCentre(Vec2 obj){centre+=obj;}
        void changeCentre(double x, double y){centre += Vec2(x, y);}

        Shape2D getShape()const{return shape;}

        bool operator==(Shape2DCollision & obj)const{
            if (obj.getShape() == Shape2D::Rect &&  shape==Shape2D::Rect){
                return obj.centre == centre && Rectangle::operator==(obj) ;
            }
            return false;
        }// TO CONTINUE
};
